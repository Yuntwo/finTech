// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lottery/v1/lottery.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FindLotteryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindLotteryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindLotteryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindLotteryReqMultiError,
// or nil if none found.
func (m *FindLotteryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindLotteryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FindLotteryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindLotteryReqMultiError(errors)
	}

	return nil
}

// FindLotteryReqMultiError is an error wrapping multiple validation errors
// returned by FindLotteryReq.ValidateAll() if the designated constraints
// aren't met.
type FindLotteryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindLotteryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindLotteryReqMultiError) AllErrors() []error { return m }

// FindLotteryReqValidationError is the validation error returned by
// FindLotteryReq.Validate if the designated constraints aren't met.
type FindLotteryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindLotteryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindLotteryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindLotteryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindLotteryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindLotteryReqValidationError) ErrorName() string { return "FindLotteryReqValidationError" }

// Error satisfies the builtin error interface
func (e FindLotteryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindLotteryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindLotteryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindLotteryReqValidationError{}

// Validate checks the field values on LotteryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LotteryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LotteryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LotteryRespMultiError, or
// nil if none found.
func (m *LotteryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LotteryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return LotteryRespMultiError(errors)
	}

	return nil
}

// LotteryRespMultiError is an error wrapping multiple validation errors
// returned by LotteryResp.ValidateAll() if the designated constraints aren't met.
type LotteryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LotteryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LotteryRespMultiError) AllErrors() []error { return m }

// LotteryRespValidationError is the validation error returned by
// LotteryResp.Validate if the designated constraints aren't met.
type LotteryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LotteryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LotteryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LotteryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LotteryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LotteryRespValidationError) ErrorName() string { return "LotteryRespValidationError" }

// Error satisfies the builtin error interface
func (e LotteryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLotteryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LotteryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LotteryRespValidationError{}

// Validate checks the field values on CreateLotteryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLotteryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLotteryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLotteryReqMultiError, or nil if none found.
func (m *CreateLotteryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLotteryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateLotteryReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateLotteryReqValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLotteryReqMultiError(errors)
	}

	return nil
}

// CreateLotteryReqMultiError is an error wrapping multiple validation errors
// returned by CreateLotteryReq.ValidateAll() if the designated constraints
// aren't met.
type CreateLotteryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLotteryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLotteryReqMultiError) AllErrors() []error { return m }

// CreateLotteryReqValidationError is the validation error returned by
// CreateLotteryReq.Validate if the designated constraints aren't met.
type CreateLotteryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLotteryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLotteryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLotteryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLotteryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLotteryReqValidationError) ErrorName() string { return "CreateLotteryReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateLotteryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLotteryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLotteryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLotteryReqValidationError{}
